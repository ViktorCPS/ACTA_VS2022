//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4984
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace ReportsWeb {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("OutstandingDataDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class OutstandingDataDS : global::System.Data.DataSet {
        
        private OutstandingDataDataTable tableOutstandingData;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OutstandingDataDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected OutstandingDataDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["OutstandingData"] != null)) {
                    base.Tables.Add(new OutstandingDataDataTable(ds.Tables["OutstandingData"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OutstandingDataDataTable OutstandingData {
            get {
                return this.tableOutstandingData;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            OutstandingDataDS cln = ((OutstandingDataDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["OutstandingData"] != null)) {
                    base.Tables.Add(new OutstandingDataDataTable(ds.Tables["OutstandingData"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableOutstandingData = ((OutstandingDataDataTable)(base.Tables["OutstandingData"]));
            if ((initTable == true)) {
                if ((this.tableOutstandingData != null)) {
                    this.tableOutstandingData.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "OutstandingDataDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/OutstandingDataDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableOutstandingData = new OutstandingDataDataTable();
            base.Tables.Add(this.tableOutstandingData);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOutstandingData() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            OutstandingDataDS ds = new OutstandingDataDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void OutstandingDataRowChangeEventHandler(object sender, OutstandingDataRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OutstandingDataDataTable : global::System.Data.TypedTableBase<OutstandingDataRow> {
            
            private global::System.Data.DataColumn columncostcenter;
            
            private global::System.Data.DataColumn columnemplname;
            
            private global::System.Data.DataColumn columnemplid;
            
            private global::System.Data.DataColumn columnempldate;
            
            private global::System.Data.DataColumn columnanomalycategory;
            
            private global::System.Data.DataColumn columnempltype;
            
            private global::System.Data.DataColumn columnworkgroup;
            
            private global::System.Data.DataColumn columnute;
            
            private global::System.Data.DataColumn columnbranch;
            
            private global::System.Data.DataColumn columngroupHrs;
            
            private global::System.Data.DataColumn columnschHrs;
            
            private global::System.Data.DataColumn columnpairHrs;
            
            private global::System.Data.DataColumn columnccDesc;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OutstandingDataDataTable() {
                this.TableName = "OutstandingData";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OutstandingDataDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OutstandingDataDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn costcenterColumn {
                get {
                    return this.columncostcenter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn emplnameColumn {
                get {
                    return this.columnemplname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn emplidColumn {
                get {
                    return this.columnemplid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn empldateColumn {
                get {
                    return this.columnempldate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn anomalycategoryColumn {
                get {
                    return this.columnanomalycategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn empltypeColumn {
                get {
                    return this.columnempltype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn workgroupColumn {
                get {
                    return this.columnworkgroup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn uteColumn {
                get {
                    return this.columnute;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn branchColumn {
                get {
                    return this.columnbranch;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn groupHrsColumn {
                get {
                    return this.columngroupHrs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn schHrsColumn {
                get {
                    return this.columnschHrs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pairHrsColumn {
                get {
                    return this.columnpairHrs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ccDescColumn {
                get {
                    return this.columnccDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OutstandingDataRow this[int index] {
                get {
                    return ((OutstandingDataRow)(this.Rows[index]));
                }
            }
            
            public event OutstandingDataRowChangeEventHandler OutstandingDataRowChanging;
            
            public event OutstandingDataRowChangeEventHandler OutstandingDataRowChanged;
            
            public event OutstandingDataRowChangeEventHandler OutstandingDataRowDeleting;
            
            public event OutstandingDataRowChangeEventHandler OutstandingDataRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOutstandingDataRow(OutstandingDataRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OutstandingDataRow AddOutstandingDataRow(string costcenter, string emplname, int emplid, System.DateTime empldate, string anomalycategory, string empltype, string workgroup, string ute, string branch, string groupHrs, string schHrs, string pairHrs, string ccDesc) {
                OutstandingDataRow rowOutstandingDataRow = ((OutstandingDataRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        costcenter,
                        emplname,
                        emplid,
                        empldate,
                        anomalycategory,
                        empltype,
                        workgroup,
                        ute,
                        branch,
                        groupHrs,
                        schHrs,
                        pairHrs,
                        ccDesc};
                rowOutstandingDataRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOutstandingDataRow);
                return rowOutstandingDataRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OutstandingDataDataTable cln = ((OutstandingDataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OutstandingDataDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncostcenter = base.Columns["costcenter"];
                this.columnemplname = base.Columns["emplname"];
                this.columnemplid = base.Columns["emplid"];
                this.columnempldate = base.Columns["empldate"];
                this.columnanomalycategory = base.Columns["anomalycategory"];
                this.columnempltype = base.Columns["empltype"];
                this.columnworkgroup = base.Columns["workgroup"];
                this.columnute = base.Columns["ute"];
                this.columnbranch = base.Columns["branch"];
                this.columngroupHrs = base.Columns["groupHrs"];
                this.columnschHrs = base.Columns["schHrs"];
                this.columnpairHrs = base.Columns["pairHrs"];
                this.columnccDesc = base.Columns["ccDesc"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncostcenter = new global::System.Data.DataColumn("costcenter", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncostcenter);
                this.columnemplname = new global::System.Data.DataColumn("emplname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnemplname);
                this.columnemplid = new global::System.Data.DataColumn("emplid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnemplid);
                this.columnempldate = new global::System.Data.DataColumn("empldate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnempldate);
                this.columnanomalycategory = new global::System.Data.DataColumn("anomalycategory", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnanomalycategory);
                this.columnempltype = new global::System.Data.DataColumn("empltype", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnempltype);
                this.columnworkgroup = new global::System.Data.DataColumn("workgroup", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnworkgroup);
                this.columnute = new global::System.Data.DataColumn("ute", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnute);
                this.columnbranch = new global::System.Data.DataColumn("branch", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbranch);
                this.columngroupHrs = new global::System.Data.DataColumn("groupHrs", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngroupHrs);
                this.columnschHrs = new global::System.Data.DataColumn("schHrs", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnschHrs);
                this.columnpairHrs = new global::System.Data.DataColumn("pairHrs", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpairHrs);
                this.columnccDesc = new global::System.Data.DataColumn("ccDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnccDesc);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OutstandingDataRow NewOutstandingDataRow() {
                return ((OutstandingDataRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OutstandingDataRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OutstandingDataRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OutstandingDataRowChanged != null)) {
                    this.OutstandingDataRowChanged(this, new OutstandingDataRowChangeEvent(((OutstandingDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OutstandingDataRowChanging != null)) {
                    this.OutstandingDataRowChanging(this, new OutstandingDataRowChangeEvent(((OutstandingDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OutstandingDataRowDeleted != null)) {
                    this.OutstandingDataRowDeleted(this, new OutstandingDataRowChangeEvent(((OutstandingDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OutstandingDataRowDeleting != null)) {
                    this.OutstandingDataRowDeleting(this, new OutstandingDataRowChangeEvent(((OutstandingDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOutstandingDataRow(OutstandingDataRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                OutstandingDataDS ds = new OutstandingDataDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OutstandingDataDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OutstandingDataRow : global::System.Data.DataRow {
            
            private OutstandingDataDataTable tableOutstandingData;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OutstandingDataRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOutstandingData = ((OutstandingDataDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string costcenter {
                get {
                    try {
                        return ((string)(this[this.tableOutstandingData.costcenterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'costcenter\' in table \'OutstandingData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOutstandingData.costcenterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string emplname {
                get {
                    try {
                        return ((string)(this[this.tableOutstandingData.emplnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'emplname\' in table \'OutstandingData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOutstandingData.emplnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int emplid {
                get {
                    try {
                        return ((int)(this[this.tableOutstandingData.emplidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'emplid\' in table \'OutstandingData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOutstandingData.emplidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime empldate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableOutstandingData.empldateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'empldate\' in table \'OutstandingData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOutstandingData.empldateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string anomalycategory {
                get {
                    try {
                        return ((string)(this[this.tableOutstandingData.anomalycategoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'anomalycategory\' in table \'OutstandingData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOutstandingData.anomalycategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string empltype {
                get {
                    try {
                        return ((string)(this[this.tableOutstandingData.empltypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'empltype\' in table \'OutstandingData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOutstandingData.empltypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string workgroup {
                get {
                    try {
                        return ((string)(this[this.tableOutstandingData.workgroupColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'workgroup\' in table \'OutstandingData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOutstandingData.workgroupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ute {
                get {
                    try {
                        return ((string)(this[this.tableOutstandingData.uteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ute\' in table \'OutstandingData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOutstandingData.uteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string branch {
                get {
                    try {
                        return ((string)(this[this.tableOutstandingData.branchColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'branch\' in table \'OutstandingData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOutstandingData.branchColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string groupHrs {
                get {
                    try {
                        return ((string)(this[this.tableOutstandingData.groupHrsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'groupHrs\' in table \'OutstandingData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOutstandingData.groupHrsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string schHrs {
                get {
                    try {
                        return ((string)(this[this.tableOutstandingData.schHrsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'schHrs\' in table \'OutstandingData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOutstandingData.schHrsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string pairHrs {
                get {
                    try {
                        return ((string)(this[this.tableOutstandingData.pairHrsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pairHrs\' in table \'OutstandingData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOutstandingData.pairHrsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ccDesc {
                get {
                    try {
                        return ((string)(this[this.tableOutstandingData.ccDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ccDesc\' in table \'OutstandingData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOutstandingData.ccDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscostcenterNull() {
                return this.IsNull(this.tableOutstandingData.costcenterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcostcenterNull() {
                this[this.tableOutstandingData.costcenterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsemplnameNull() {
                return this.IsNull(this.tableOutstandingData.emplnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetemplnameNull() {
                this[this.tableOutstandingData.emplnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsemplidNull() {
                return this.IsNull(this.tableOutstandingData.emplidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetemplidNull() {
                this[this.tableOutstandingData.emplidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsempldateNull() {
                return this.IsNull(this.tableOutstandingData.empldateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetempldateNull() {
                this[this.tableOutstandingData.empldateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsanomalycategoryNull() {
                return this.IsNull(this.tableOutstandingData.anomalycategoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetanomalycategoryNull() {
                this[this.tableOutstandingData.anomalycategoryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsempltypeNull() {
                return this.IsNull(this.tableOutstandingData.empltypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetempltypeNull() {
                this[this.tableOutstandingData.empltypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsworkgroupNull() {
                return this.IsNull(this.tableOutstandingData.workgroupColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetworkgroupNull() {
                this[this.tableOutstandingData.workgroupColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuteNull() {
                return this.IsNull(this.tableOutstandingData.uteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuteNull() {
                this[this.tableOutstandingData.uteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbranchNull() {
                return this.IsNull(this.tableOutstandingData.branchColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbranchNull() {
                this[this.tableOutstandingData.branchColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgroupHrsNull() {
                return this.IsNull(this.tableOutstandingData.groupHrsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgroupHrsNull() {
                this[this.tableOutstandingData.groupHrsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsschHrsNull() {
                return this.IsNull(this.tableOutstandingData.schHrsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetschHrsNull() {
                this[this.tableOutstandingData.schHrsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspairHrsNull() {
                return this.IsNull(this.tableOutstandingData.pairHrsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpairHrsNull() {
                this[this.tableOutstandingData.pairHrsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsccDescNull() {
                return this.IsNull(this.tableOutstandingData.ccDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetccDescNull() {
                this[this.tableOutstandingData.ccDescColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OutstandingDataRowChangeEvent : global::System.EventArgs {
            
            private OutstandingDataRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OutstandingDataRowChangeEvent(OutstandingDataRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OutstandingDataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591